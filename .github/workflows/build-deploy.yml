name: Build and Deploy to GitHub Pages

on:
  schedule:
    # Runs every hour (adjust as needed)
    - cron: '0 * * * *'
  # Allow manual trigger
  workflow_dispatch:
  # Run on pushes to the main branch of the public repo
  push:
    branches: [ main ]

# Define environment variables for easy updates
env:
  PUBLIC_REPO_NAME: "cinnamonlife/sparklingtracks.com"
  SITE_PATH_PREFIX: "/sparklingtracks.com"
  SITE_TITLE: "Sparkling Tracks"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Check out public repository
      - name: Checkout public repository
        uses: actions/checkout@v3
        
      # Set up SSH for deploy key
      - name: Set up SSH deploy key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PRIVATE_REPO_DEPLOY_KEY }}
          
      # Add GitHub to known hosts
      - name: Add GitHub to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
      # Clone private repository to a temporary directory
      - name: Clone private repository
        run: |
          git clone git@github.com:${{ secrets.PRIVATE_REPO_NAME }}.git private-repo-temp
          
      # Modify Vite configuration to use the correct base path
      - name: Update Vite configuration for GitHub Pages
        run: |
          echo "Modifying Vite configuration for GitHub Pages deployment..."
          
          # Find vite.config.js or vite.config.ts
          VITE_CONFIG=""
          if [ -f "private-repo-temp/vite.config.ts" ]; then
            VITE_CONFIG="private-repo-temp/vite.config.ts"
          elif [ -f "private-repo-temp/vite.config.js" ]; then
            VITE_CONFIG="private-repo-temp/vite.config.js"
          else
            echo "Could not find Vite configuration file. Searching for it..."
            VITE_CONFIG=$(find private-repo-temp -name "vite.config.*" | head -n 1)
          fi
          
          echo "Found Vite config at: $VITE_CONFIG"
          echo "Original Vite configuration:"
          cat "$VITE_CONFIG"
          
          # Create a backup of the original file
          cp "$VITE_CONFIG" "${VITE_CONFIG}.bak"
          
          # Instead of trying to modify the existing file with sed, let's create a new file
          # This ensures proper syntax based on the current structure
          echo "Creating a modified configuration file..."
          
          # Extract the content of the original file
          ORIGINAL_CONTENT=$(cat "$VITE_CONFIG")
          
          # Create a new temporary file
          cat > "${VITE_CONFIG}.new" << EOF
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  base: '${{ env.SITE_PATH_PREFIX }}/',
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  build: {
    minify: true,
    sourcemap: false,
    cssMinify: true
  }
}));
EOF
          
          # Replace the original file with our new file
          mv "${VITE_CONFIG}.new" "$VITE_CONFIG"
          
          echo "Updated Vite configuration:"
          cat "$VITE_CONFIG"
          
      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: private-repo-temp/package-lock.json
          
      # Build project
      - name: Build project
        working-directory: private-repo-temp
        run: |
          echo "Installing dependencies:"
          npm ci
          
          echo "Running build command with increased memory limit:"
          NODE_OPTIONS=--max_old_space_size=4096 npm run build
          
          echo "Build complete. Checking output:"
          ls -la dist || echo "dist directory not found!"
          
      # Add CNAME file for custom domain (uncomment when ready to use a custom domain)
      # - name: Add CNAME for custom domain
      #   working-directory: private-repo-temp/dist
      #   run: |
      #     echo "your-domain.com" > CNAME
          
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: private-repo-temp/dist
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
          branch: gh-pages
          clean: true
